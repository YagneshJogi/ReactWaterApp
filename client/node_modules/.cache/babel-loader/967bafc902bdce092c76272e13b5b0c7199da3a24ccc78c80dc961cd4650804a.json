{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yagnesh\\\\Desktop\\\\ReactWater\\\\client\\\\src\\\\components\\\\ESP32Config.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigContainer = styled.div`\n  background: white;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n_c = ConfigContainer;\nconst InputGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 1rem;\n`;\n_c2 = InputGroup;\nconst Input = styled.input`\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  flex: 1;\n`;\n_c3 = Input;\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #1976d2;\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n_c4 = Button;\nconst Status = styled.div`\n  font-size: 0.9rem;\n  color: ${props => props.error ? 'red' : 'green'};\n  margin-top: 0.5rem;\n`;\n_c5 = Status;\nfunction ESP32Config() {\n  _s();\n  const [ip, setIp] = useState('');\n  const [currentIP, setCurrentIP] = useState('');\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // Fetch current ESP32 IP on component mount\n    fetchCurrentIP();\n  }, []);\n  const fetchCurrentIP = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/esp32-ip');\n      const data = await response.json();\n      setCurrentIP(data.ip);\n      setIp(data.ip); // Set the input field to current IP\n    } catch (err) {\n      setError('Failed to fetch current ESP32 IP');\n      console.error('Error fetching IP:', err);\n    }\n  };\n  const handleUpdateIP = async () => {\n    if (!ip.trim()) {\n      setError('Please enter an IP address');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setStatus('');\n    try {\n      const response = await fetch('http://localhost:5000/api/esp32-ip', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ip: ip.trim()\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setCurrentIP(data.ip);\n        setStatus('ESP32 IP updated successfully');\n        setError('');\n      } else {\n        setError(data.error || 'Failed to update IP');\n      }\n    } catch (err) {\n      setError('Failed to update ESP32 IP');\n      console.error('Error updating IP:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ConfigContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"ESP32 Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: \"Enter ESP32 IP address\",\n        value: ip,\n        onChange: e => setIp(e.target.value),\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpdateIP,\n        disabled: loading,\n        children: loading ? 'Updating...' : 'Update IP'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Status, {\n      error: true,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this), status && /*#__PURE__*/_jsxDEV(Status, {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 18\n    }, this), currentIP && /*#__PURE__*/_jsxDEV(Status, {\n      children: [\"Current ESP32 IP: \", currentIP]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(ESP32Config, \"SzSLZpR7MI1ymwRElrLpk/lzw3Q=\");\n_c6 = ESP32Config;\nexport default ESP32Config;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ConfigContainer\");\n$RefreshReg$(_c2, \"InputGroup\");\n$RefreshReg$(_c3, \"Input\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"Status\");\n$RefreshReg$(_c6, \"ESP32Config\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","ConfigContainer","div","_c","InputGroup","_c2","Input","input","_c3","Button","button","_c4","Status","props","error","_c5","ESP32Config","_s","ip","setIp","currentIP","setCurrentIP","status","setStatus","setError","loading","setLoading","fetchCurrentIP","response","fetch","data","json","err","console","handleUpdateIP","trim","method","headers","body","JSON","stringify","ok","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","disabled","onClick","_c6","$RefreshReg$"],"sources":["C:/Users/Yagnesh/Desktop/ReactWater/client/src/components/ESP32Config.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConfigContainer = styled.div`\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst InputGroup = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 0.5rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  flex: 1;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  background-color: #2196f3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: #1976d2;\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #ccc;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst Status = styled.div`\r\n  font-size: 0.9rem;\r\n  color: ${props => props.error ? 'red' : 'green'};\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nfunction ESP32Config() {\r\n  const [ip, setIp] = useState('');\r\n  const [currentIP, setCurrentIP] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch current ESP32 IP on component mount\r\n    fetchCurrentIP();\r\n  }, []);\r\n\r\n  const fetchCurrentIP = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/esp32-ip');\r\n      const data = await response.json();\r\n      setCurrentIP(data.ip);\r\n      setIp(data.ip); // Set the input field to current IP\r\n    } catch (err) {\r\n      setError('Failed to fetch current ESP32 IP');\r\n      console.error('Error fetching IP:', err);\r\n    }\r\n  };\r\n\r\n  const handleUpdateIP = async () => {\r\n    if (!ip.trim()) {\r\n      setError('Please enter an IP address');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    setStatus('');\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/esp32-ip', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ ip: ip.trim() }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setCurrentIP(data.ip);\r\n        setStatus('ESP32 IP updated successfully');\r\n        setError('');\r\n      } else {\r\n        setError(data.error || 'Failed to update IP');\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to update ESP32 IP');\r\n      console.error('Error updating IP:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConfigContainer>\r\n      <h3>ESP32 Configuration</h3>\r\n      <InputGroup>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Enter ESP32 IP address\"\r\n          value={ip}\r\n          onChange={(e) => setIp(e.target.value)}\r\n          disabled={loading}\r\n        />\r\n        <Button \r\n          onClick={handleUpdateIP}\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Updating...' : 'Update IP'}\r\n        </Button>\r\n      </InputGroup>\r\n      {error && <Status error>{error}</Status>}\r\n      {status && <Status>{status}</Status>}\r\n      {currentIP && (\r\n        <Status>\r\n          Current ESP32 IP: {currentIP}\r\n        </Status>\r\n      )}\r\n    </ConfigContainer>\r\n  );\r\n}\r\n\r\nexport default ESP32Config; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGH,MAAM,CAACI,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,eAAe;AAQrB,MAAMG,UAAU,GAAGN,MAAM,CAACI,GAAG;AAC7B;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAJID,UAAU;AAMhB,MAAME,KAAK,GAAGR,MAAM,CAACS,KAAK;AAC1B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,KAAK;AAOX,MAAMG,MAAM,GAAGX,MAAM,CAACY,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAjBIF,MAAM;AAmBZ,MAAMG,MAAM,GAAGd,MAAM,CAACI,GAAG;AACzB;AACA,WAAWW,KAAK,IAAIA,KAAK,CAACC,KAAK,GAAG,KAAK,GAAG,OAAO;AACjD;AACA,CAAC;AAACC,GAAA,GAJIH,MAAM;AAMZ,SAASI,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,KAAK,EAAEU,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd;IACA8B,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCV,YAAY,CAACS,IAAI,CAACZ,EAAE,CAAC;MACrBC,KAAK,CAACW,IAAI,CAACZ,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZR,QAAQ,CAAC,kCAAkC,CAAC;MAC5CS,OAAO,CAACnB,KAAK,CAAC,oBAAoB,EAAEkB,GAAG,CAAC;IAC1C;EACF,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAChB,EAAE,CAACiB,IAAI,CAAC,CAAC,EAAE;MACdX,QAAQ,CAAC,4BAA4B,CAAC;MACtC;IACF;IAEAE,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,EAAE,CAAC;IACZD,SAAS,CAAC,EAAE,CAAC;IAEb,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEtB,EAAE,EAAEA,EAAE,CAACiB,IAAI,CAAC;QAAE,CAAC;MACxC,CAAC,CAAC;MAEF,MAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACa,EAAE,EAAE;QACfpB,YAAY,CAACS,IAAI,CAACZ,EAAE,CAAC;QACrBK,SAAS,CAAC,+BAA+B,CAAC;QAC1CC,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,MAAM;QACLA,QAAQ,CAACM,IAAI,CAAChB,KAAK,IAAI,qBAAqB,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZR,QAAQ,CAAC,2BAA2B,CAAC;MACrCS,OAAO,CAACnB,KAAK,CAAC,oBAAoB,EAAEkB,GAAG,CAAC;IAC1C,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,eAAe;IAAAyC,QAAA,gBACd1C,OAAA;MAAA0C,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B9C,OAAA,CAACI,UAAU;MAAAsC,QAAA,gBACT1C,OAAA,CAACM,KAAK;QACJyC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,wBAAwB;QACpCC,KAAK,EAAE/B,EAAG;QACVgC,QAAQ,EAAGC,CAAC,IAAKhC,KAAK,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QACvCI,QAAQ,EAAE5B;MAAQ;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACF9C,OAAA,CAACS,MAAM;QACL6C,OAAO,EAAEpB,cAAe;QACxBmB,QAAQ,EAAE5B,OAAQ;QAAAiB,QAAA,EAEjBjB,OAAO,GAAG,aAAa,GAAG;MAAW;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACZhC,KAAK,iBAAId,OAAA,CAACY,MAAM;MAACE,KAAK;MAAA4B,QAAA,EAAE5B;IAAK;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EACvCxB,MAAM,iBAAItB,OAAA,CAACY,MAAM;MAAA8B,QAAA,EAAEpB;IAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EACnC1B,SAAS,iBACRpB,OAAA,CAACY,MAAM;MAAA8B,QAAA,GAAC,oBACY,EAACtB,SAAS;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEtB;AAAC7B,EAAA,CAvFQD,WAAW;AAAAuC,GAAA,GAAXvC,WAAW;AAyFpB,eAAeA,WAAW;AAAC,IAAAb,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAI,GAAA,EAAAwC,GAAA;AAAAC,YAAA,CAAArD,EAAA;AAAAqD,YAAA,CAAAnD,GAAA;AAAAmD,YAAA,CAAAhD,GAAA;AAAAgD,YAAA,CAAA7C,GAAA;AAAA6C,YAAA,CAAAzC,GAAA;AAAAyC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}